-- File: ./vhdl-output/MemController.vhd
-- Generated by MyHDL 0.11
-- Date: Fri Mar 27 15:14:58 2020


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity MemController is
    port (
        clk: in std_logic;
        address: in unsigned(1 downto 0);
        data_o: out signed (2 downto 0);
        data_i: in signed (2 downto 0);
        write_enable: in std_logic
    );
end entity MemController;
-- MemController(clk, mem, address, data_o, data_i, write_enable):
--     - returns a memory reader
--     - arguments:
--         clk: the clock driving the reader
--             type:               Signal(bool)
--             kind of argument:   SENSIBILITY
--         address: the address in the memory you want to access
--             type:               Signal(intbv) OR Signal(modbv)
--             kind of argument:   INPUT
--         data_o: the Signal in which to retrieve the memory content
--             type:               Signal(intbv) OR Signal(modbv)
--             kind of argument:   OUTPUT
--             bitsize:            same as every element in mem
--         data_i: the Signal from which to write the memory content
--             type:               Signal(intbv) OR Signal(modbv)
--             kind of argument:   INPUT
--             bitsize:            same as every element in mem
--         write_enable: the Signal telling when to write data to the
--                       specified address in memory.
--                       If writing to the memory, data_o will also
--                       be updated as the previous value of the memory cell,
--                       until the next clock cycle.
--                       Set the bit to 1 OR True if you want to write to the
--                       specified address, otherwise set it to 0 OR False.
--             type:               Signal(bool)
--             kind of argument:   INPUT
--         min_val: Minimum value the RAM can hold, int < max_val
--             type:               int
--             kind of argument:   PARAMETER
--         max_val: Maximum value the RAM can hold, int > min_val
--             type:               int
--             kind of argument:   PARAMETER
--         mem_size: Size of the memory instance,   int > 0
--             type:               int
--             kind of argument:   PARAMETER
-- Example:
-- address = Signal(modbv(0, max=mem_size, min=0))
-- data_o = Signal(intbv(mem[address], min=0, max=10))
-- data_i = Signal(intbv(mem[address], min=0, max=10))
-- write_enable = Signal(bool(False))
-- memController = MemController(clk=clk,
--                               address=address,
--                               data_o=data_o,
--                               data_i=data_i,
--                               write_enable=write_enable,
--                               min_val=0,
--                               max_val=10,
--                               mem_size=10,
--                              )

architecture MyHDL of MemController is



type t_array_mem is array(0 to 3-1) of signed (2 downto 0);
signal mem: t_array_mem;

begin




MEMCONTROLLER_READWRITE: process (clk) is
begin
    if rising_edge(clk) then
        if (write_enable = '1') then
            mem(to_integer(address)) <= data_i;
        end if;
        data_o <= mem(to_integer(address));
    end if;
end process MEMCONTROLLER_READWRITE;

end architecture MyHDL;
